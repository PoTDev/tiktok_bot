
import telebot
import tempfile	
import uuid
import urllib.request
import time
import tornado

from telebot import TeleBot
from telebot import types
from TikTokApi import TikTokApi
from moviepy.editor import *
from database import database
from tornado.httpserver import HTTPServer
from tornado.ioloop import PeriodicCallback, IOLoop
from queue import Queue
from queue import Empty



# –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
class CustomPeriodicCallback(PeriodicCallback):
    def __init__(self, request_queue, response_queue, callback_time, io_loop=None):
        if callback_time <= 0:
            raise ValueError("Periodic callback must have a positive callback_time")

        self.callback_time = callback_time
        self.io_loop = io_loop or IOLoop.current()
        self._running = False
        self._timeout = None
        self.request_queue = request_queue
        self.response_queue = response_queue



    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏, –æ–¥–Ω–æ–ø–æ—Ç–æ—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    # –≤–∑—è–ª–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á—É, –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏, –∑–∞–ø–∏—Å–∞–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ —Å–∫–∞–∑–∞–ª–∏ —á—Ç–æ –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–µ–Ω–µ–Ω–∞
    def queue_callback(self):
        try:
            #–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            message = self.request_queue.get_nowait()
        except Empty:
            pass
        else:
            start = False
            is_reset = False

            #–æ–±—Ä–∞–±–æ—Ç–∫–∞
            print(message['text'])
            filename = str(uuid.uuid4())
            print(filename)
            tmp = tempfile.TemporaryDirectory()
            video_url = get_video_url(message['text'])

            video_saver(video_url, filename, tmp)

            self.response_queue.put({
              'chat_id': message['chat_id'],
              'filename': filename,
              'tmp': tmp
                })


            self.request_queue.task_done()


    def _run(self):
        if not self._running:
            return
        try:
            return self.queue_callback()
        except Exception:
            self.io_loop.handle_callback_exception(self.queue_callback)
        finally:
            self._schedule_next()



# –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–æ–≤ Telegram –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
class BotPeriodicCallback(PeriodicCallback):
    def __init__(self, bot, callback_time, io_loop=None):
        if callback_time <= 0:
            raise ValueError("Periodic callback must have a positive callback_time")

        self.callback_time = callback_time
        self.io_loop = io_loop or IOLoop.current()
        self._running = False
        self._timeout = None
        self.bot = bot

    def bot_callback(self, timeout=1):
        #print 'bot_callback'
        if self.bot.skip_pending:
            self.bot.skip_pending = False

        updates = self.bot.get_updates(offset=(self.bot.last_update_id + 1), timeout=timeout)
        self.bot.process_new_updates(updates)
        self.bot.send_response_messages()

    def _run(self):
        if not self._running:
            return
        try:
            return self.bot_callback()
        except Exception:
            self.io_loop.handle_callback_exception(self.bot_callback)
        finally:
            self._schedule_next()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫ –±–æ—Ç—É –æ—á–µ—Ä–µ–¥–µ–π –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
class AppTeleBot(TeleBot, object):
    def __init__(self, token, request_queue, response_queue, threaded=True, skip_pending=False):
        super(AppTeleBot, self).__init__(token, threaded=True, skip_pending=False)

        self.request_queue = request_queue
        self.response_queue = response_queue

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ—á–µ—Ä–µ–¥–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    def send_response_messages(self):
        try:
            message = self.response_queue.get_nowait()
        except Empty:
            pass
        else:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏—Ç–æ–≥–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

            #–≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            type_check = type_checking(message['chat_id'])
            text_caption = '\n'
            text_caption += '–°–∫–∞—á–∞–Ω–æ –≤ @ttvideoaudiobot \n'

            if type_check == 0: # –ê–£–î–ò–û –ò –í–ò–î–ï–û

              audio = get_audio(message['tmp'], message['filename'])
              self.send_video(message['chat_id'], open(os.path.join(message['tmp'].name, "{}.mp4".format(str(message['filename']))), 'rb'), caption = text_caption)
              self.send_audio(message['chat_id'], audio)

            elif type_check == 1: # –¢–û–õ–¨–ö–û –í–ò–î–ï
              
              self.send_video(message['chat_id'], open(os.path.join(message['tmp'].name, "{}.mp4".format(str(message['filename']))), 'rb'), caption = text_caption)

            elif type_check == 2: # –¢–û–õ–¨–ö–û –ê–£–î–ò–û
              
              audio = get_audio(message['tmp'], message['filename'])
              self.send_audio(message['chat_id'], audio)

            message['tmp'].cleanup()
            
            #–ü–æ–º–µ—Ç–∫–∞ —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
            self.response_queue.task_done()





# --------------- –û–°–ù–û–í–ù–û–ô –ë–û–¢ --------------- ‚Ññ
print("#----------------------- –°–¢–ê–†–¢ -----------------------#")
token = '1939154692:AAEWu2LLMTeEJ9uMJZta3TG-XoQghFULp0w'
request_queue = Queue(maxsize=0) # –æ—á–µ—Ä–µ–¥—å –∑–∞–ø—Ä–æ—Å–æ–≤
response_queue = Queue(maxsize=0) # –æ—á–µ—Ä–µ–¥—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

#–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = AppTeleBot(token, request_queue, response_queue)

#–∫–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
@bot.message_handler(commands=['start','help'])  
def start_command(message):  

  user_checkin(message)

  text_hi = '–ü—Ä–∏–≤–µ—Çüòä\n'
  text_hi += '–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∏–¥–µ–æ –∏–∑ —Ç–∏–∫—Ç–æ–∫–∞ –° –í–û–î–Ø–ù–´–ú –∑–Ω–∞–∫–æ–º \n'
  text_hi += '–¢–∞–∫–∂–µ —è —É–º–µ—é –∏–∑–≤–ª–µ–∫–∞—Ç—å –∏–∑ –≤–∏–¥–µ–æ –∞—É–¥–∏–æ –¥–æ—Ä–æ–∂–∫—É\n'
  text_hi += '\n'
  text_hi += '–ß—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ\n'
  text_hi += '\n'
  text_hi += '*–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é* —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è *–¢–û–õ–¨–ö–û* –≤–∏–¥–µ–æ \n'
  text_hi += '–ù–∞–∂–º–∏—Ç–µ /setup, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å\n'

  bot.send_message(message.chat.id, text_hi, parse_mode='MarkdownV2')
  # my_thread = threading.Thread(target = start_command, args = (1,), daemon = True).start()

#–∫–æ–º–∞–Ω–¥–∞ setup
@bot.message_handler(commands=['setup'])  
def setup_command(message):

  user_checkin(message)

  text_setup_begin = "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–∫–∞—á–∏–≤–∞—Ç—å: \n"

  keyboard = types.InlineKeyboardMarkup()

  button_1 = types.InlineKeyboardButton(text="–¢–æ–ª—å–∫–æ –≤–∏–¥–µ–æ", callback_data='1')
  keyboard.add(button_1)
  button_2 = types.InlineKeyboardButton(text="–¢–æ–ª—å–∫–æ –∞—É–¥–∏–æ", callback_data='2')
  keyboard.add(button_2)
  button_3 = types.InlineKeyboardButton(text="–ê—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ", callback_data='0')
  keyboard.add(button_3)

  #keyboard.add(types.InlineKeyboardButton(text=r"@{0}".format(buttons), url=r"t.me/{0}".format(buttons)))
  bot.send_message(message.chat.id, text_setup_begin, reply_markup= keyboard)

  # my_thread = threading.Thread(target = setup_command, args = (1,), daemon = True).start()

@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
  if call.data == '0':
    type_check = '0'
    type_changing(call, type_check)

  elif call.data == '1':
    type_check = '1'
    type_changing(call, type_check)

  elif call.data == '2':
    type_check = '2'
    type_changing(call, type_check)
# my_thread = threading.Thread(target = callback_inline, args = (1,), daemon = True).start()

#–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ
@bot.message_handler(content_types=['text'])
def handle(message):


  check = user_checkin(message)
  
  text_exception = '–û—à–∏–±–∫–∞. –í —Å—Å—ã–ª–∫–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –æ—à–∏–±–∫–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Å—ã–ª–∫–æ–π –Ω–∞ –≤–∏–¥–µ–æ —Ç–∏–∫—Ç–æ–∫ \n'
  text_exception += '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑\n'

  if not ("http" and "tiktok") in message.text:
    print('–û–°–¢–ê–ù–û–í–õ–ï–ù')
    print(message.text)
    bot.send_message(message.chat.id, text_exception)
    return

  print(message.text)

  print('–°–û–ï–î–ò–ù–ï–ù–ò–ï –° –ë–ê–ó–û–ô –î–ê–ù–ù–û–ô –£–°–¢–ê–ù–û–í–õ–ï–ù–û')

  bot.send_message(message.chat.id, '–°–∫–∞—á–∏–≤–∞—é... –ü–æ–¥–æ–∂–¥–∏—Ç–µ —á—É—Ç—å-—á—É—Ç—å')


  if check:

    bot.request_queue.put({

      'text': message.text,
      'chat_id': message.chat.id
      })

  else:
    output = '–û—à–∏–±–∫–∞ –±–æ—Ç–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É'
    bot.reply_to(message.chat.id, output)
  


def user_checkin(message):

    #–≤—ã–∑–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    us_id = message.from_user.id
    username = message.from_user.username
    us_chat_id = message.chat.id


    db = database()
    check = 0
    check = db.check_connection(check)

    if check:

        print('–°–û–ï–î–ò–ù–ï–ù–ò–ï –° –ë–ê–ó–û–ô –î–ê–ù–ù–û–ô –£–°–¢–ê–ù–û–í–õ–ï–ù–û')
        #–æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        check_user = db.user_identity(us_id, us_chat_id, username)

        result = 1

    else:

        print('–û–®–ò–ë–ö–ê –° –†–ê–ë–û–¢–û–ô –ë–î')

        result = 0

    return result

  
    # multiprocessing.Process(target=user_checkin, args=(message,)) 


def get_video_url(url):

    r1 = None
    user_agent = {'User-Agent': 'Mozilla/5.0 (platform; rv:geckoversion) Gecko/geckotrail Firefox/firefoxversion'}
    req = urllib.request.Request(url, headers=user_agent)
    webpage = urllib.request.urlopen(req)
    r1= webpage.geturl()

    return r1



def video_saver(url, filename, tmp):
  api = TikTokApi.get_instance()
  time.sleep(1)
  video_bytes = api.get_video_by_url(url)
  print('AFTER')

  with open(os.path.join(tmp.name, "{}.mp4".format(str(filename))), 'wb') as output:
    output.write(video_bytes)

  
def get_audio(tmp, filename):

  audioclip = AudioFileClip(os.path.join(tmp.name, "{0}.mp4".format(str(filename)))) 
  audioclip.write_audiofile(os.path.join(tmp.name, "{0}.mp3".format(str(filename))))

  return open(os.path.join(tmp.name, "{0}.mp3".format(str(filename))), 'rb')


def type_checking(message):

  us_chat_id = message

  db = database()
  check = 0
  check = db.check_connection(check)

  if check:
    print('–°–û–ï–î–ò–ù–ï–ù–ò–ï –° –ë–ê–ó–û–ô –î–ê–ù–ù–û–ô –£–°–¢–ê–ù–û–í–õ–ï–ù–û')

    #–æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    type_check = db.type_check(us_chat_id)

  else:
    print('–û–®–ò–ë–ö–ê –° –†–ê–ë–û–¢–û–ô –ë–î')

    type_check = 0

  return type_check


def type_changing(message, type):

    us_chat_id = message.from_user.id

    db = database()
    check = 0
    check = db.check_connection(check)

    if check:
      print('–°–û–ï–î–ò–ù–ï–ù–ò–ï –° –ë–ê–ó–û–ô –î–ê–ù–ù–û–ô –£–°–¢–ê–ù–û–í–õ–ï–ù–û')

      #–æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      type_check = db.type_change(us_chat_id, type)

      bot.send_message(us_chat_id, '–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ.')

    else:
      print('–û–®–ò–ë–ö–ê –° –†–ê–ë–û–¢–û–ô –ë–î')

      type_check = 0


ioloop = tornado.ioloop.IOLoop.instance()
BotPeriodicCallback(bot, 5000, ioloop).start()
CustomPeriodicCallback(request_queue, response_queue, 1000, ioloop).start()
ioloop.start()

bot.polling(none_stop=True)