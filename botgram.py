import asyncio

import logging
import os
import threading
import urllib
import uuid

from aiogram import Bot, Dispatcher, executor, types, utils
# from aiogram.types import message

from ddgram import database
from mytiktokapi.tiktok import TikTokApi
# from playwright import async_playwright

class botsFunctions:
    async def user_checkin(message):
        # –≤—ã–∑–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        us_id = message.from_user.id
        username = message.from_user.username
        us_chat_id = message.chat.id

        db = database()
        check = 0
        check = await db.check_connection(check)

        if check:

            print('–°–û–ï–î–ò–ù–ï–ù–ò–ï –° –ë–ê–ó–û–ô –î–ê–ù–ù–û–ô –£–°–¢–ê–ù–û–í–õ–ï–ù–û')
            # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            check_user = await db.user_identity(us_id, us_chat_id, username)

            result = 1

        else:

            print('–û–®–ò–ë–ö–ê –° –†–ê–ë–û–¢–û–ô –ë–î')

            result = 0

        return result


class videosaver:
    async def video_saver(url, filename):
        api = await TikTokApi.get_instance()
        video_bytes = await api.get_video_by_url(url)
        print('AFTER')

        with open(os.path.join("{}.mp4".format(str(filename))), 'wb') as output:
            output.write(video_bytes)

        asyncio.get_event_loop().run_until_complete(videosaver.video_saver(url, filename))
        th1 = threading.Thread(target=videosaver.video_saver, args=(url, filename))


# --------------- –û–°–ù–û–í–ù–û–ô –ë–û–¢ --------------- ‚Ññ


print("#----------------------- –°–¢–ê–†–¢ -----------------------#")
API_TOKEN = '1938640806:AAFwTN4KbpRQF_X5nwPFvReE8DhztHDStjM'
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)


@dp.message_handler(commands=['start', 'help'])
async def start_command(message=types.Message):
    await botsFunctions.user_checkin(message)

    text_hi = '–ü—Ä–∏–≤–µ—Çüòä\n'
    text_hi += '–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –≤–∏–¥–µ–æ –∏–∑ —Ç–∏–∫—Ç–æ–∫–∞\n'
    text_hi += '\n'
    text_hi += '–Ø –º–æ–≥—É: \n'
    text_hi += ' ‚úî _—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å_ –≤–∏–¥–µ–æ c *–≤–æ–¥—è–Ω—ã–º* –∑–Ω–∞–∫–æ–º\n'
    text_hi += ' ‚úî _–∏–∑–≤–ª–µ—á—å_ –∏–∑ –≤–∏–¥–µ–æ –∞—É–¥–∏–æ –¥–æ—Ä–æ–∂–∫—É\n'
    text_hi += ' ‚úî _—É–∑–Ω–∞—Ç—å_ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∞–≤—Ç–æ—Ä–∞ –º—É–∑—ã–∫–∏ –∏–∑ –≤–∏–¥–µ–æ\n'
    text_hi += '\n'
    text_hi += '*–ß—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ*\n'
    text_hi += '\n'
    text_hi += '*–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é* —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è *–¢–û–õ–¨–ö–û* –≤–∏–¥–µ–æ, –∞ Shazam *–æ—Ç–∫–ª—é—á–µ–Ω*\n'
    text_hi += '–ù–∞–∂–º–∏—Ç–µ /setup, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å\n'

    await message.answer(text_hi, parse_mode='Markdown')


@dp.message_handler(content_types=['text'])
async def handle(message=types.Message):
    check = await botsFunctions.user_checkin(message)

    text_exception = '–û—à–∏–±–∫–∞. –í —Å—Å—ã–ª–∫–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –æ—à–∏–±–∫–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Å—ã–ª–∫–æ–π –Ω–∞ *–≤–∏–¥–µ–æ* —Ç–∏–∫—Ç–æ–∫ \n'
    text_exception += '–ü—Ä–∏–º–µ—Ä —Å—Å—ã–ª–æ–∫:\n'
    text_exception += 'https://vm.tiktok.com/asdfgssd/\n'
    text_exception += 'https://www.tiktok.com/@username/video/123456789abcdefg\n'
    text_exception += '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑\n'

    if ("tiktok") in message.text:
        if ("vm.tiktok") in message.text:
            print('–¥–∞')
        elif ("video") in message.text:
            print('–¥–∞')
        else:
            print('–û–°–¢–ê–ù–û–í–õ–ï–ù')
            print(message.text)
            await message.reply(text_exception, parse_mode='Markdown', disable_web_page_preview=True)
            return
    else:
        print('–û–°–¢–ê–ù–û–í–õ–ï–ù')
        print(message.text)
        await message.reply(text_exception, parse_mode='Markdown', disable_web_page_preview=True)
        return

    print(message.text)

    print('–°–û–ï–î–ò–ù–ï–ù–ò–ï –° –ë–ê–ó–û–ô –î–ê–ù–ù–û–ô –£–°–¢–ê–ù–û–í–õ–ï–ù–û')

    await message.answer('–°–∫–∞—á–∏–≤–∞—é... –ü–æ–¥–æ–∂–¥–∏—Ç–µ —á—É—Ç—å-—á—É—Ç—å')

    if check:

        r1 = None
        user_agent = {'User-Agent': 'Mozilla/5.0 (platform; rv:geckoversion) Gecko/geckotrail Firefox/firefoxversion'}
        req = urllib.request.Request(message.text, headers=user_agent)
        webpage = urllib.request.urlopen(req)
        r1 = webpage.geturl()

        filename = str(uuid.uuid4())

        loop = asyncio.get_running_loop()
        await loop.run_in_executor(await videosaver.video_saver(r1, filename))

        await message.answer_video(open(("{}.mp4".format(str(filename))), 'rb'))

    else:
        output = '–û—à–∏–±–∫–∞ –±–æ—Ç–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É'
        await message.answer(message.chat.id, output)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
